{
  "name": "Patterntracker",
  "tagline": "",
  "body": "Color Pattern Tracker: User Guide\r\n==========\r\n\r\nVirtual reality, or VR, is the newest and potentially the most efficient\r\ndimension of media. One of the important components of creating a\r\nvirtual experience is simulating the vision. And for simulating vision,\r\none should know the user’s field of view at any given time. The field of\r\nview is in turn determined by the position and orientation of user’s\r\nhead. A few companies have provided some solutions to the head tracking\r\nproblem. Among them [Oculus](https://www.oculus.com/en-us/dk2/) is one of the most workable solutions which uses\r\ninfrared LEDs on the headset for tracking. Their system is, however,\r\nexpensive!\r\n\r\nSystem overview\r\n===============\r\n\r\nHere, we describe a cost efficient solution to head tracking. It only\r\nrequires a color-printed sheet of paper and a commodity smartphone. In\r\nthe proposed system, a printed pattern is tracked using the smartphone\r\ncamera to estimate its position and orientation. The estimated position\r\nand orientation are then sent back to the headset via bluetooth. The\r\nheadset in turn renders a virtual scene from a desired viewpoint\r\nrelative to the user’s head. High efficiency and accuracy are two of the\r\nmain characteristics of our system that makes it viable.\r\n\r\nThe main components of the proposed systems are\r\n\r\n1.  Pattern design\r\n\r\n2.  Detector/tracker design\r\n\r\n3.  Multiple pattern registration\r\n\r\n\r\nPattern design\r\n--------------\r\n\r\nThe six patterns used in our system are shown in the figure\r\nabove. Note that the only difference between the different\r\npatterns is on their border. Different patterns have different grid\r\nblocks with black outer border and this difference is what is used to\r\nidentify different patterns. These borders are specifically placed with\r\ngood error tolerance using error correcting codes.\r\n\r\nThe color grid pattern itself is designed by exhaustively searching for\r\nall possible combinations of red, green and blue colors on a grid of\r\nsize 4 x 4 for quick and accurate detection.\r\n\r\n| <img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/pattern_idNewSel5.bmp\" alt=\"Pattern 2\" width=\"140px\" height=\"100px\">  | <img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/pattern_idNewSel6.bmp\" alt=\"Pattern 1\" width=\"140px\" height=\"100px\"> | <img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/pattern_idNewSel9.bmp\" alt=\"Pattern 0\" width=\"140px\" height=\"100px\">|\r\n| ------------- | ------------- | -------|\r\n| Pattern 0  | Pattern 1  | Pattern 2|\r\n| <img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/pattern_idNewSel10.bmp\" alt=\"Pattern 2\" width=\"140px\" height=\"100px\">  | <img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/pattern_idNewSel13.bmp\" alt=\"Pattern 1\" width=\"140px\" height=\"100px\"> | <img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/pattern_idNewSel14.bmp\" alt=\"Pattern 0\" width=\"140px\" height=\"100px\">|\r\n| Pattern 3  | Pattern 4  | Pattern 5|\r\n\r\nDetector/Tracker design\r\n-----------------------\r\n\r\nThe pattern is detected by fast detection of corners in the image which\r\ncontain all the three colors used e.g. red, green and blue. It uses a\r\nhighly optimized coarse to fine algorithm implementation for precise\r\ndetection of corners. Note that all the 9 interior corners of the grid\r\npattern have all the three colors surrounding them.\r\n\r\nWe avoid running (relatively) expensive pattern detection algorithm in\r\neach frame of video captured by the camera by predicting the position of\r\nthe corners in the next frame and then confining the search for corners\r\nto a small region. The well known Kalman filter is also used to smoothen\r\nthe pattern trajectory.\r\n\r\nMultiple pattern registration\r\n-----------------------------\r\n\r\nIn order to be able to track the user’s head with a single camera,\r\nmultiple patterns are required to be placed on the headset in case one\r\nof the patterns is highly oblique to the camera. To achieve this,\r\nrelative position and orientation of different patterns is estimated.\r\n\r\nOperation\r\n=========\r\n\r\nIn this Section we shall describe the procedure to operate the system\r\nwith varying degree of control on the system. First we shall describe\r\nthe simplest way to run the system using the provided .apk files.\r\n\r\nFollowing are the minimum set of items required to operate the proposed\r\nsystem:\r\n\r\n1.  Tracker phone: Galaxy S6\r\n\r\n2.  VR headset: GearVR with a smartphone (VR phone)\r\n\r\n3.  Printed patterns: Cardboard/foamboard cutouts with patterns pasted\r\n\r\nAs more control is required on the system, additional software will be\r\nrequired.\r\n\r\n<img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/sideVRH.jpg\" alt=\"VR Headset\" width=\"800px\" height=\"440px\">   \r\nVR Headset\r\n\r\n<img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/trackerPhone.jpg\" alt=\"Tracker phone\" width=\"800px\" height=\"440px\">   \r\nTracker phone\r\n\r\nDirect installation\r\n-------------------\r\nFollowing are the instructions to directly operate the system without\r\ninstallation:\r\n\r\n1.  Install the Tracker apk \\[PatternTracker.apk\\] available in the \"Executables\" folder  on the Tracker phone.\r\n\r\n2.  Install VR apk \\[TrackerGearVR.apk\\] available in the \"Executables\" folder on a the VR phone.\r\n\r\n3.  Pair Tracker phone and VR phone via bluetooth.\r\n\r\n4.  Print the six patterns shown in the figure above as described\r\n    in “Pattern printing instructions\" below\r\n\r\n5.  Attach the Pattern 0 on the front side of VR headset and any number\r\n    of the remaining patterns on other parts of the VR headset. See\r\n    figure above.\r\n\r\n6.  Start the PatternTracker.apk on Tracker phone. Place this phone\r\n    horizontally so that the “Debug:on\" button is on top left corner and\r\n    the back-facing camera facing towards the user. See Figure\r\n    above. Place it appropriately so that the\r\n    GearVR is comfortably in the field of view.\r\n\r\n7.  Start the app on the VR phone and put it in GearVR.\r\n\r\n8.  Optionally, register the multiple patterns. See details below.\r\n\r\n9.  Optionally, click the “Debug:on\" button to turn it to “Debug:off\"\r\n    which will enhance the performance of the system but will stop\r\n    showing the corner indicator.\r\n\r\n10. Wear GearVR and try to move back and forth, and left and right to\r\n    notice that your view in VR is adjusting according to your motion.\r\n\r\n\r\n<img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/updateGeomOn.jpg\" alt=\"update geometry on\" width=\"800px\" height=\"440px\">   \r\nTracker phone with “update geometry\" feature on.\r\n\r\n<img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/updateGeomOff.jpg\" alt=\"update geometry off\" width=\"800px\" height=\"440px\">     \r\nTracker phone with “update geometry\" feature off.\r\n\r\nFollowing are the instructions for registering multiple patterns:\r\n\r\n1.  Click the “Update Geom: off\" button so that it show “Update Geom:\r\n    on\"\r\n\r\n2.  Place the camera of the Tracker phone so that the Pattern 0 and one\r\n    of the other patterns are in view as seen on its screen and capture\r\n    good portion -more than half- of the screen. Make sure the lighting\r\n    is good.\r\n\r\n3.  See the corner indicators appear on the screen.\r\n\r\n4.  Once the corner indicators are stable i.e. not coming on and going\r\n    off frequently, press the “Update Geom: on” button again to turn it\r\n    into “Update Geom: off\". Notice that below the buttons, each new\r\n    detected pattern will be listed. This shows that the new pattern has\r\n    been registered with the assumption that Pattern 0 was\r\n    already registered. See figure above where\r\n    Pattern 3 is registered with Pattern 0.\r\n\r\n5.  Follow steps 1 through 4 for registering each new pattern given the\r\n    already registered patterns. E.g. if in the last step Pattern 1 was\r\n    registered, in order to register Pattern 2 place the Tracker phone so\r\n    that either Pattern 0 and Pattern 2 are in view or Pattern 1 and\r\n    Pattern 2 are in view and then follow steps 2 through 3.\r\n\r\nPattern printing instructions on windows machine:\r\n\r\n1.  Open a pattern image among those available at PatternDesign\\patterns in windows photo viewer;\r\n\r\n2.  Print image in letter paper, 3.5x5in, four images in a page,\r\n    un-check “fit to frame”. Size of printed pattern should be 10.6cm\r\n    wide and 7.1cm high. See figure above.\r\n\r\n<img src=\"https://raw.githubusercontent.com/SamsungVR/PatternTracker/master/Documents/images/patternSize.jpg\" alt=\"update geometry off\" width=\"800px\" height=\"440px\">   \r\nPrinted pattern with a measurement scale.\r\n\r\nIn case the system crashes, one reason is that the opengl libraries on\r\nphone are incompatible with the ones provided with the system. To\r\nresolve this issue, the Tracker phone apk will need to be compiled again\r\nas described in Section below.\r\n\r\nProject compilation\r\n-------------------\r\n\r\nFirst, we shall describe the compilation of Tracker apk. The compilation\r\nrequires that the following are already installed on the computer:\r\nlatest Android SDK, Android NDK r10b, Eclipse. See [http://developer.android.com/ndk/guides/setup.html](http://developer.android.com/ndk/guides/setup.html) for\r\nreference. Also, OpenCV 2.4.9 for Android, available at [http://opencv.org/downloads.html](http://opencv.org/downloads.html), needs\r\nto be installed on the system.\r\n\r\nTo compile the project, first import the project in Eclipse as follows:\r\n\r\n1.  Browse to File>Import>Android>Existing Android Code\r\n    Into Workspace.\r\n\r\n2.  Browse to the folder containing PatternTracker project.\r\n\r\n3.  Select the “PatternTracker\" project and click “Finish\".\r\n\r\nSimilarly import the OpenCV Librar - 2.4.9 from the downloaded OpenCV\r\nfolder. And also the BluetoothLibrary from the corresponding\r\nfolder.\r\n\r\nNow we need to add the required libraries in the project as follows:\r\n\r\n1.  Select the PatternTracker project in Eclipse on the left panel\r\n\r\n2.  Go to Project>Properties>Android.\r\n\r\n3.  In the bottom right “Library\" section, remove any existing libraries\r\n\r\n4.  Click “Add\" and add the OpenCV and the Bluetooth libraries.\r\n\r\n5.  Edit the “include C:/.../OpenCV.mk\" line in the Android.mk file\r\n    present inside the jni folder in the PatternTracker android project\r\n    and modify it appropriately to provide the directory where the\r\n    OpenCV is installed.\r\n\r\nSet the ndk compiler as follows:\r\n\r\n1.  Select the PatternTracker project in Eclipse on the left panel\r\n\r\n2.  Go to Project>Properties>Builders.\r\n\r\n3.  Click “New Builder\" on the right panel and click “Edit\".\r\n\r\n4.  In the new window, click on the “Main\" tab and enter the location of\r\n    ndk-build.cmd file. It should be something like “...android-ndk-r10b\r\n    folder folder/ndk-build.cmd\".\r\n\r\nFinally, “Clean\" and “build\" the project and run it on the Galaxy S6\r\nphone.\r\n\r\nIf it does not run, libEGL.so and libOpenCL.so will need to be extracted\r\nfrom the phone and placed at appropriate location. The libEGL.so file\r\ntypically resides in the /system/lib/ directory of the smartphone and\r\nlibOpenCL.so is typically found in /system/vendor/lib/ directory. The\r\nfollowing commands on windows command prompt can be used to achieve this\r\ntask:   \r\n\r\n>\\>adb shell  \r\n>\\>cd storage/sdcard0  \r\n>\\>cp /system/lib/libEGL.so .  \r\n>\\>cp /system/vendor/lib/libOpenCL.so .  \r\n\r\nThen you can copy the two library files from the windows explorer to “jni\\libs\". It should now be ready to run.\r\n\r\nIn order to compile the VR apk, perform the following steps:\r\n\r\n1.  Install unity 5.3.4f1 available at [https://unity3d.com/get-unity/download](https://unity3d.com/get-unity/download).\r\n\r\n2.  Open the project and go to File>Build Settings>Player\r\n    Settings>Publishing settings\r\n\r\n3.  Use some existing keystore or create a new keystore.\r\n\r\n4.  Click build to create the apk.\r\n\r\nOnce both the VR apk and Tracker apk are built, follow the steps\r\ndescribed in Direct Installation section to run the system.\r\n\r\nA detailed paper providing the complete algorithm description and theoretical underpinnings will be available shortly.\r\n\r\nBy: Abhishek Nagar   \r\n\tSamsung Electronics America, Dallas   \r\n\t[a.nagar@samsung.com](mailto:a.nagar@samsung.com)   \r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}